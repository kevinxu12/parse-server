// Autogenerated Detail test, do not edit.

jest.mock("pg")
import pg from 'pg';

const originalEnvironment = process.env;
process.env.COPYSCAPE_USERNAME = "UNKNOWN";
process.env.COPYSCAPE_KEY = "REDACTED";
process.env.JUNE_KEY = "REDACTED";
process.env.MG_API_KEY = "REDACTED";
process.env.BUGSNAG_KEY = "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa";
process.env.NANGO = "REDACTED";
process.env.SCREENSHOT_ONE_ACCESS_KEY = "REDACTED";
process.env.SCREENSHOT_ONE_SECRET_KEY = "REDACTED";
process.env.__DETAIL_TEST_MODE = "true";

import { libraries, request, utils } from "@detail-dev/replay";
import crypto from "crypto";
import { createClient } from "redis";

jest.mock("crypto", () => {
  const mCrypto = {
    ...jest.requireActual("crypto"),
    randomBytes: jest.fn(),
    randomUUID: jest.fn(),
  };
  return mCrypto;
});
// jest.mock("pg", () => libraries.PgInterceptor.createMock());
jest.mock("redis", () => libraries.RedisInterceptor.createMock());

describe("POST /parse/classes/GameScore", () => {
  let response: request.Response;
  let httpInterceptor: libraries.HttpInterceptor;

  // Set up crypto fixtures.
  const cryptoCallsExpected = [
    {
      library: "crypto",
      input: {
        functionName: "randomUUID",
        args: [],
      },
      output: "7652a15e-4513-4cbc-8e75-233692845f4f",
      id: "d11c7894a2944aa1",
      timestamp: 1717786639825000,
      startup: true,
    },
    {
      library: "crypto",
      input: {
        functionName: "randomBytes",
        args: [10],
      },
      output: {
        type: "Buffer",
        data: [190, 187, 235, 87, 127, 236, 29, 242, 197, 39],
      },
      id: "cde43c591b6c10e1",
      timestamp: 1717786646463000,
      startup: false,
    },
  ];
  let cryptoInterceptor: libraries.CryptoInterceptor;

  const OriginalDate = Date;
  // Set up date fixtures.
  const dateCallsExpected = [
    {
      library: "date",
      input: "now",
      output: "1717786639872",
      id: "7928150926ac8d24",
      timestamp: 1717786639872000,
      startup: true,
    },
    {
      library: "date",
      input: "now",
      output: "1717786639911",
      id: "a92b5e8284676809",
      timestamp: 1717786639911000,
      startup: true,
    },
    {
      library: "date",
      input: "now",
      output: "1717786639922",
      id: "345962ad6ac3f606",
      timestamp: 1717786639922000,
      startup: true,
    },
    {
      library: "date",
      input: "now",
      output: "1717786639932",
      id: "ba617ed027162cf9",
      timestamp: 1717786639932000,
      startup: true,
    },
    {
      library: "date",
      input: "now",
      output: "1717786639949",
      id: "937274bc9954aff4",
      timestamp: 1717786639949000,
      startup: true,
    },
    {
      library: "date",
      input: "now",
      output: "1717786639950",
      id: "740ed26a1d22a902",
      timestamp: 1717786639950000,
      startup: true,
    },
    {
      library: "date",
      input: "now",
      output: "1717786639952",
      id: "4a39ca491d8e3818",
      timestamp: 1717786639952000,
      startup: true,
    },
    {
      library: "date",
      input: "now",
      output: "1717786639953",
      id: "d9ac44791441912d",
      timestamp: 1717786639953000,
      startup: true,
    },
    {
      library: "date",
      input: "now",
      output: "1717786639954",
      id: "befc085120d0081c",
      timestamp: 1717786639954000,
      startup: true,
    },
    {
      library: "date",
      input: "now",
      output: "1717786639960",
      id: "55373792883164d6",
      timestamp: 1717786639960000,
      startup: true,
    },
    {
      library: "date",
      input: "now",
      output: "1717786639962",
      id: "7c6e02ff2ab378f4",
      timestamp: 1717786639961000,
      startup: true,
    },
    {
      library: "date",
      input: "now",
      output: "1717786639964",
      id: "2822d31daae7c721",
      timestamp: 1717786639964000,
      startup: true,
    },
    {
      library: "date",
      input: "now",
      output: "1717786639964",
      id: "5db4e7721ec69610",
      timestamp: 1717786639964000,
      startup: true,
    },
    {
      library: "date",
      input: "now",
      output: "1717786639965",
      id: "b89568c54ddfd521",
      timestamp: 1717786639965000,
      startup: true,
    },
    {
      library: "date",
      input: "now",
      output: "1717786639965",
      id: "549b4b45f1ea3226",
      timestamp: 1717786639965000,
      startup: true,
    },
    {
      library: "date",
      input: "now",
      output: "1717786639966",
      id: "08be2a8a7120bd38",
      timestamp: 1717786639966000,
      startup: true,
    },
    {
      library: "date",
      input: "now",
      output: "1717786639967",
      id: "525f335ca297b1ac",
      timestamp: 1717786639967000,
      startup: true,
    },
    {
      library: "date",
      input: "now",
      output: "1717786639971",
      id: "0b8f5b4d118f09e2",
      timestamp: 1717786639971000,
      startup: true,
    },
    {
      library: "date",
      input: "now",
      output: "1717786639976",
      id: "81c2df95080f5d1a",
      timestamp: 1717786639976000,
      startup: true,
    },
    {
      library: "date",
      input: "now",
      output: "1717786639981",
      id: "743d5ebcac855cc6",
      timestamp: 1717786639981000,
      startup: true,
    },
    {
      library: "date",
      input: "now",
      output: "1717786639987",
      id: "aa40169a37797a18",
      timestamp: 1717786639987000,
      startup: true,
    },
    {
      library: "date",
      input: "now",
      output: "1717786639990",
      id: "3bf6d7e72730e73e",
      timestamp: 1717786639990000,
      startup: true,
    },
    {
      library: "date",
      input: "now",
      output: "1717786639990",
      id: "aa346614260f1dde",
      timestamp: 1717786639990000,
      startup: true,
    },
    {
      library: "date",
      input: "now",
      output: "1717786639991",
      id: "ba26fb707bee7418",
      timestamp: 1717786639991000,
      startup: true,
    },
    {
      library: "date",
      input: "now",
      output: "1717786639993",
      id: "30d5a9e214de4abf",
      timestamp: 1717786639993000,
      startup: true,
    },
    {
      library: "date",
      input: "now",
      output: "1717786639995",
      id: "d4a75be101ffd783",
      timestamp: 1717786639995000,
      startup: true,
    },
    {
      library: "date",
      input: "now",
      output: "1717786639997",
      id: "3561e3c0c314b1ef",
      timestamp: 1717786639997000,
      startup: true,
    },
    {
      library: "date",
      input: "now",
      output: "1717786639997",
      id: "acc9acb52d386285",
      timestamp: 1717786639997000,
      startup: true,
    },
    {
      library: "date",
      input: "now",
      output: "1717786639998",
      id: "6a4b3fd777a29c61",
      timestamp: 1717786639998000,
      startup: true,
    },
    {
      library: "date",
      input: "now",
      output: "1717786639999",
      id: "4b2d3aad4c5ccce1",
      timestamp: 1717786639999000,
      startup: true,
    },
    {
      library: "date",
      input: "now",
      output: "1717786640005",
      id: "544903f78723f0d1",
      timestamp: 1717786640005000,
      startup: true,
    },
    {
      library: "date",
      input: "now",
      output: "1717786640013",
      id: "a61c3c301fba682d",
      timestamp: 1717786640013000,
      startup: true,
    },
    {
      library: "date",
      input: "now",
      output: "1717786640018",
      id: "955a8059ce62a889",
      timestamp: 1717786640018000,
      startup: true,
    },
    {
      library: "date",
      input: "now",
      output: "1717786640021",
      id: "560a80e77fa81dd4",
      timestamp: 1717786640021000,
      startup: true,
    },
    {
      library: "date",
      input: "now",
      output: "1717786640025",
      id: "2ad750d5c1d41640",
      timestamp: 1717786640025000,
      startup: true,
    },
    {
      library: "date",
      input: "now",
      output: "1717786640030",
      id: "062b05054a16fd9b",
      timestamp: 1717786640030000,
      startup: true,
    },
    {
      library: "date",
      input: "now",
      output: "1717786640031",
      id: "044f0058c376d3b7",
      timestamp: 1717786640031000,
      startup: true,
    },
    {
      library: "date",
      input: "now",
      output: "1717786640032",
      id: "b10b6718e9df8e5f",
      timestamp: 1717786640032000,
      startup: true,
    },
    {
      library: "date",
      input: "now",
      output: "1717786640033",
      id: "0b7039c2c882245c",
      timestamp: 1717786640033000,
      startup: true,
    },
    {
      library: "date",
      input: "now",
      output: "1717786640033",
      id: "4c23736c9b95b0d2",
      timestamp: 1717786640033000,
      startup: true,
    },
    {
      library: "date",
      input: "now",
      output: "1717786640034",
      id: "5027bd75b262920e",
      timestamp: 1717786640034000,
      startup: true,
    },
    {
      library: "date",
      input: "now",
      output: "1717786640034",
      id: "d161a64929fe8e9c",
      timestamp: 1717786640034000,
      startup: true,
    },
    {
      library: "date",
      input: "now",
      output: "1717786640045",
      id: "9346a8424bf955c7",
      timestamp: 1717786640045000,
      startup: true,
    },
    {
      library: "date",
      input: "now",
      output: "1717786640055",
      id: "0c62bd7feb2c26c3",
      timestamp: 1717786640055000,
      startup: true,
    },
    {
      library: "date",
      input: "now",
      output: "1717786640059",
      id: "977d1d8e831ca367",
      timestamp: 1717786640059000,
      startup: true,
    },
    {
      library: "date",
      input: "now",
      output: "1717786640063",
      id: "22bdc65f44d77962",
      timestamp: 1717786640063000,
      startup: true,
    },
    {
      library: "date",
      input: "now",
      output: "1717786640064",
      id: "769e4cba36e10a05",
      timestamp: 1717786640064000,
      startup: true,
    },
    {
      library: "date",
      input: "now",
      output: "1717786640065",
      id: "96d53b5070567284",
      timestamp: 1717786640065000,
      startup: true,
    },
    {
      library: "date",
      input: "now",
      output: "1717786640065",
      id: "c636c3ad8a2d04ea",
      timestamp: 1717786640065000,
      startup: true,
    },
    {
      library: "date",
      input: "now",
      output: "1717786640071",
      id: "403ff0fed54027e0",
      timestamp: 1717786640071000,
      startup: true,
    },
    {
      library: "date",
      input: "now",
      output: "1717786640072",
      id: "d315d209e393258d",
      timestamp: 1717786640072000,
      startup: true,
    },
    {
      library: "date",
      input: "now",
      output: "1717786640075",
      id: "35d1a226bee91791",
      timestamp: 1717786640075000,
      startup: true,
    },
    {
      library: "date",
      input: "Date.new",
      output: "2024-06-07T18:57:26.459Z",
      id: "3775f2a2fa863db9",
      timestamp: 1717786646459000,
      startup: false,
    },
    {
      library: "date",
      input: "now",
      output: "1717786646459",
      id: "c360bc1df7eb939c",
      timestamp: 1717786646459000,
      startup: false,
    },
    {
      library: "date",
      input: "Date.new",
      output: "2024-06-07T18:57:26.461Z",
      id: "475a22e7a664782d",
      timestamp: 1717786646461000,
      startup: false,
    },
    {
      library: "date",
      input: "Date.new",
      output: "2024-06-07T18:57:26.465Z",
      id: "299cf51e997e3d81",
      timestamp: 1717786646465000,
      startup: false,
    },
    {
      library: "date",
      input: "now",
      output: "1717786646466",
      id: "1d41eb5b4a644f9c",
      timestamp: 1717786646466000,
      startup: false,
    },
    {
      library: "date",
      input: "now",
      output: "1717786646470",
      id: "7cd5564ba6507a3b",
      timestamp: 1717786646470000,
      startup: false,
    },
    {
      library: "date",
      input: "Date.new",
      output: "2024-06-07T18:57:26.471Z",
      id: "f0bdf45447a73c22",
      timestamp: 1717786646471000,
      startup: false,
    },
    {
      library: "date",
      input: "now",
      output: "1717786646473",
      id: "ecbb62b722eec713",
      timestamp: 1717786646473000,
      startup: false,
    },
  ];
  let dateInterceptor: libraries.DateInterceptor;

  let client: any;
  // Set up pg fixtures.
  const pgCallsExpected = [
    {
      library: "pg",
      input: {
        connectionString: "*",
      },
      output: {
        type: 2,
        value: [],
      },
      id: "c7c21e557ac45c00",
      timestamp: 1717786639831000,
      startup: true,
    },
    {
      library: "pg",
      input: {
        query:
          'CREATE TABLE IF NOT EXISTS "_SCHEMA" ( "className" varChar(120), "schema" jsonb, "isParseClass" bool, PRIMARY KEY ("className") )',
        params: [],
      },
      output: {
        type: 1,
        value: [],
      },
      id: "e8a0a8ab3de4f15f",
      timestamp: 1717786639863000,
      startup: true,
    },
    {
      library: "pg",
      input: {
        connectionString: "*",
      },
      output: {
        type: 2,
        value: [],
      },
      id: "003a14ba30729af4",
      timestamp: 1717786639896000,
      startup: true,
    },
    {
      library: "pg",
      input: {
        connectionString: "*",
      },
      output: {
        type: 2,
        value: [],
      },
      id: "c349e5e68979b6f4",
      timestamp: 1717786639896000,
      startup: true,
    },
    {
      library: "pg",
      input: {
        connectionString: "*",
      },
      output: {
        type: 2,
        value: [],
      },
      id: "c8f149050ba9b894",
      timestamp: 1717786639898000,
      startup: true,
    },
    {
      library: "pg",
      input: {
        connectionString: "*",
      },
      output: {
        type: 2,
        value: [],
      },
      id: "e6ceb04b9c89fae3",
      timestamp: 1717786639899000,
      startup: true,
    },
    {
      library: "pg",
      input: {
        connectionString: "*",
      },
      output: {
        type: 2,
        value: [],
      },
      id: "ee2a07286478582d",
      timestamp: 1717786639900000,
      startup: true,
    },
    {
      library: "pg",
      input: {
        connectionString: "*",
      },
      output: {
        type: 2,
        value: [],
      },
      id: "b9d9b0676c29eb63",
      timestamp: 1717786639902000,
      startup: true,
    },
    {
      library: "pg",
      input: {
        connectionString: "*",
      },
      output: {
        type: 2,
        value: [],
      },
      id: "b05d72cb96acd895",
      timestamp: 1717786639902000,
      startup: true,
    },
    {
      library: "pg",
      input: {
        query:
          'CREATE TABLE IF NOT EXISTS "_Hooks" ("functionName" text,"className" text,"triggerName" text,"url" text)',
        params: [],
      },
      output: {
        type: 1,
        value: [],
      },
      id: "5e254ef1bdc98eea",
      timestamp: 1717786639905000,
      startup: true,
    },
    {
      library: "pg",
      input: {
        query: "begin",
        params: [],
      },
      output: {
        type: 1,
        value: [],
      },
      id: "3f631824a6368e3a",
      timestamp: 1717786639914000,
      startup: true,
    },
    {
      library: "pg",
      input: {
        query: "commit",
        params: [],
      },
      output: {
        type: 1,
        value: [],
      },
      id: "5d01a807ab9a5d38",
      timestamp: 1717786639926000,
      startup: true,
    },
    {
      library: "pg",
      input: {
        query:
          "SELECT column_name FROM information_schema.columns WHERE table_name = '_Hooks'",
        params: [],
      },
      output: {
        type: 1,
        value: [
          {
            column_name: "functionName",
          },
          {
            column_name: "className",
          },
          {
            column_name: "triggerName",
          },
          {
            column_name: "url",
          },
        ],
      },
      id: "f8ac1452cadffa6b",
      timestamp: 1717786639935000,
      startup: true,
    },
    {
      library: "pg",
      input: {
        query:
          'CREATE TABLE IF NOT EXISTS "_PushStatus" ("objectId" text,PRIMARY KEY ("objectId"),"createdAt" timestamp with time zone,"updatedAt" timestamp with time zone,"pushTime" text,"source" text,"query" text,"payload" text,"title" text,"expiry" double precision,"expiration_interval" double precision,"status" text,"numSent" double precision,"numFailed" double precision,"pushHash" text,"errorMessage" jsonb,"sentPerType" jsonb,"failedPerType" jsonb,"sentPerUTCOffset" jsonb,"failedPerUTCOffset" jsonb,"count" double precision,"_rperm" text[],"_wperm" text[])',
        params: [],
      },
      output: {
        type: 1,
        value: [],
      },
      id: "cf5f5c09186af6b7",
      timestamp: 1717786639939000,
      startup: true,
    },
    {
      library: "pg",
      input: {
        query:
          'CREATE TABLE IF NOT EXISTS "_Audience" ("objectId" text,PRIMARY KEY ("objectId"),"createdAt" timestamp with time zone,"updatedAt" timestamp with time zone,"name" text,"query" text,"lastUsed" timestamp with time zone,"timesUsed" double precision,"_rperm" text[],"_wperm" text[])',
        params: [],
      },
      output: {
        type: 1,
        value: [],
      },
      id: "30dc708c80135979",
      timestamp: 1717786639940000,
      startup: true,
    },
    {
      library: "pg",
      input: {
        query:
          'CREATE TABLE IF NOT EXISTS "_GraphQLConfig" ("objectId" text,PRIMARY KEY ("objectId"),"config" jsonb)',
        params: [],
      },
      output: {
        type: 1,
        value: [],
      },
      id: "e428e0484c75c3e2",
      timestamp: 1717786639942000,
      startup: true,
    },
    {
      library: "pg",
      input: {
        query:
          'CREATE TABLE IF NOT EXISTS "_JobStatus" ("objectId" text,PRIMARY KEY ("objectId"),"createdAt" timestamp with time zone,"updatedAt" timestamp with time zone,"jobName" text,"source" text,"status" text,"message" text,"params" jsonb,"finishedAt" timestamp with time zone,"_rperm" text[],"_wperm" text[])',
        params: [],
      },
      output: {
        type: 1,
        value: [],
      },
      id: "aa616eca0a57c2c0",
      timestamp: 1717786639943000,
      startup: true,
    },
    {
      library: "pg",
      input: {
        query:
          'CREATE TABLE IF NOT EXISTS "_GlobalConfig" ("objectId" text,PRIMARY KEY ("objectId"),"params" jsonb,"masterKeyOnly" jsonb)',
        params: [],
      },
      output: {
        type: 1,
        value: [],
      },
      id: "69138c14d80fc024",
      timestamp: 1717786639945000,
      startup: true,
    },
    {
      library: "pg",
      input: {
        query:
          'CREATE TABLE IF NOT EXISTS "_JobSchedule" ("objectId" text,PRIMARY KEY ("objectId"),"createdAt" timestamp with time zone,"updatedAt" timestamp with time zone,"jobName" text,"description" text,"params" text,"startAfter" text,"daysOfWeek" jsonb,"timeOfDay" text,"lastRun" double precision,"repeatMinutes" double precision,"_rperm" text[],"_wperm" text[])',
        params: [],
      },
      output: {
        type: 1,
        value: [],
      },
      id: "f45982210a2d3df4",
      timestamp: 1717786639947000,
      startup: true,
    },
    {
      library: "pg",
      input: {
        query: "begin",
        params: [],
      },
      output: {
        type: 1,
        value: [],
      },
      id: "e6ec7bd9cc90a766",
      timestamp: 1717786639949000,
      startup: true,
    },
    {
      library: "pg",
      input: {
        query: "begin",
        params: [],
      },
      output: {
        type: 1,
        value: [],
      },
      id: "4351ea545916420e",
      timestamp: 1717786639950000,
      startup: true,
    },
    {
      library: "pg",
      input: {
        query: "begin",
        params: [],
      },
      output: {
        type: 1,
        value: [],
      },
      id: "de755513bc3cfeff",
      timestamp: 1717786639952000,
      startup: true,
    },
    {
      library: "pg",
      input: {
        query: "begin",
        params: [],
      },
      output: {
        type: 1,
        value: [],
      },
      id: "f173cc796fcc5d15",
      timestamp: 1717786639953000,
      startup: true,
    },
    {
      library: "pg",
      input: {
        query: "begin",
        params: [],
      },
      output: {
        type: 1,
        value: [],
      },
      id: "94f7c95be804c6b8",
      timestamp: 1717786639955000,
      startup: true,
    },
    {
      library: "pg",
      input: {
        query:
          'CREATE TABLE IF NOT EXISTS "_Idempotency" ("objectId" text,PRIMARY KEY ("objectId"),"createdAt" timestamp with time zone,"updatedAt" timestamp with time zone,"reqId" text,"expire" timestamp with time zone,"_rperm" text[],"_wperm" text[])',
        params: [],
      },
      output: {
        type: 1,
        value: [],
      },
      id: "75599810e73105c7",
      timestamp: 1717786639958000,
      startup: true,
    },
    {
      library: "pg",
      input: {
        query: "commit",
        params: [],
      },
      output: {
        type: 1,
        value: [],
      },
      id: "440feb32adda00c3",
      timestamp: 1717786639961000,
      startup: true,
    },
    {
      library: "pg",
      input: {
        query: "commit",
        params: [],
      },
      output: {
        type: 1,
        value: [],
      },
      id: "7937585fd2211703",
      timestamp: 1717786639962000,
      startup: true,
    },
    {
      library: "pg",
      input: {
        query: "commit",
        params: [],
      },
      output: {
        type: 1,
        value: [],
      },
      id: "ca37e0917d23083b",
      timestamp: 1717786639964000,
      startup: true,
    },
    {
      library: "pg",
      input: {
        query: "commit",
        params: [],
      },
      output: {
        type: 1,
        value: [],
      },
      id: "7dd4527da673618a",
      timestamp: 1717786639964000,
      startup: true,
    },
    {
      library: "pg",
      input: {
        query: "commit",
        params: [],
      },
      output: {
        type: 1,
        value: [],
      },
      id: "a140baa8ec32bc01",
      timestamp: 1717786639965000,
      startup: true,
    },
    {
      library: "pg",
      input: {
        query: "begin",
        params: [],
      },
      output: {
        type: 1,
        value: [],
      },
      id: "4aaa4fdfa1acb235",
      timestamp: 1717786639966000,
      startup: true,
    },
    {
      library: "pg",
      input: {
        query: "begin",
        params: [],
      },
      output: {
        type: 1,
        value: [],
      },
      id: "7ae248065288171b",
      timestamp: 1717786639966000,
      startup: true,
    },
    {
      library: "pg",
      input: {
        query:
          "SELECT column_name FROM information_schema.columns WHERE table_name = '_PushStatus'",
        params: [],
      },
      output: {
        type: 1,
        value: [
          {
            column_name: "numFailed",
          },
          {
            column_name: "createdAt",
          },
          {
            column_name: "errorMessage",
          },
          {
            column_name: "sentPerType",
          },
          {
            column_name: "failedPerType",
          },
          {
            column_name: "sentPerUTCOffset",
          },
          {
            column_name: "failedPerUTCOffset",
          },
          {
            column_name: "count",
          },
          {
            column_name: "expiry",
          },
          {
            column_name: "expiration_interval",
          },
          {
            column_name: "updatedAt",
          },
          {
            column_name: "numSent",
          },
          {
            column_name: "_wperm",
          },
          {
            column_name: "pushTime",
          },
          {
            column_name: "source",
          },
          {
            column_name: "query",
          },
          {
            column_name: "payload",
          },
          {
            column_name: "title",
          },
          {
            column_name: "status",
          },
          {
            column_name: "pushHash",
          },
          {
            column_name: "_rperm",
          },
          {
            column_name: "objectId",
          },
        ],
      },
      id: "de6ecfce712159aa",
      timestamp: 1717786639970000,
      startup: true,
    },
    {
      library: "pg",
      input: {
        query:
          "SELECT column_name FROM information_schema.columns WHERE table_name = '_Audience'",
        params: [],
      },
      output: {
        type: 1,
        value: [
          {
            column_name: "lastUsed",
          },
          {
            column_name: "timesUsed",
          },
          {
            column_name: "createdAt",
          },
          {
            column_name: "updatedAt",
          },
          {
            column_name: "objectId",
          },
          {
            column_name: "_wperm",
          },
          {
            column_name: "name",
          },
          {
            column_name: "query",
          },
          {
            column_name: "_rperm",
          },
        ],
      },
      id: "2535358b877ec890",
      timestamp: 1717786639975000,
      startup: true,
    },
    {
      library: "pg",
      input: {
        query:
          "SELECT column_name FROM information_schema.columns WHERE table_name = '_GraphQLConfig'",
        params: [],
      },
      output: {
        type: 1,
        value: [
          {
            column_name: "config",
          },
          {
            column_name: "objectId",
          },
        ],
      },
      id: "09ef3f96ea439107",
      timestamp: 1717786639979000,
      startup: true,
    },
    {
      library: "pg",
      input: {
        query:
          "SELECT column_name FROM information_schema.columns WHERE table_name = '_JobStatus'",
        params: [],
      },
      output: {
        type: 1,
        value: [
          {
            column_name: "params",
          },
          {
            column_name: "finishedAt",
          },
          {
            column_name: "createdAt",
          },
          {
            column_name: "updatedAt",
          },
          {
            column_name: "message",
          },
          {
            column_name: "_rperm",
          },
          {
            column_name: "objectId",
          },
          {
            column_name: "_wperm",
          },
          {
            column_name: "jobName",
          },
          {
            column_name: "source",
          },
          {
            column_name: "status",
          },
        ],
      },
      id: "0f9a3b9c3aad9475",
      timestamp: 1717786639985000,
      startup: true,
    },
    {
      library: "pg",
      input: {
        query:
          "SELECT column_name FROM information_schema.columns WHERE table_name = '_GlobalConfig'",
        params: [],
      },
      output: {
        type: 1,
        value: [
          {
            column_name: "params",
          },
          {
            column_name: "masterKeyOnly",
          },
          {
            column_name: "objectId",
          },
        ],
      },
      id: "11dfaefd00a46932",
      timestamp: 1717786639989000,
      startup: true,
    },
    {
      library: "pg",
      input: {
        query: "commit",
        params: [],
      },
      output: {
        type: 1,
        value: [],
      },
      id: "86da9415a8aebe10",
      timestamp: 1717786639990000,
      startup: true,
    },
    {
      library: "pg",
      input: {
        query: "commit",
        params: [],
      },
      output: {
        type: 1,
        value: [],
      },
      id: "fd44a3c3ae3e7ee8",
      timestamp: 1717786639990000,
      startup: true,
    },
    {
      library: "pg",
      input: {
        query:
          "SELECT column_name FROM information_schema.columns WHERE table_name = '_Idempotency'",
        params: [],
      },
      output: {
        type: 1,
        value: [
          {
            column_name: "expire",
          },
          {
            column_name: "updatedAt",
          },
          {
            column_name: "createdAt",
          },
          {
            column_name: "_wperm",
          },
          {
            column_name: "reqId",
          },
          {
            column_name: "objectId",
          },
          {
            column_name: "_rperm",
          },
        ],
      },
      id: "b02c9dc6e44e6840",
      timestamp: 1717786640003000,
      startup: true,
    },
    {
      library: "pg",
      input: {
        query:
          "SELECT column_name FROM information_schema.columns WHERE table_name = '_JobSchedule'",
        params: [],
      },
      output: {
        type: 1,
        value: [
          {
            column_name: "createdAt",
          },
          {
            column_name: "lastRun",
          },
          {
            column_name: "repeatMinutes",
          },
          {
            column_name: "updatedAt",
          },
          {
            column_name: "daysOfWeek",
          },
          {
            column_name: "timeOfDay",
          },
          {
            column_name: "_rperm",
          },
          {
            column_name: "objectId",
          },
          {
            column_name: "_wperm",
          },
          {
            column_name: "jobName",
          },
          {
            column_name: "description",
          },
          {
            column_name: "params",
          },
          {
            column_name: "startAfter",
          },
        ],
      },
      id: "4cc4bc0b01f2c6b2",
      timestamp: 1717786640010000,
      startup: true,
    },
    {
      library: "pg",
      input: {
        query: "begin",
        params: [],
      },
      output: {
        type: 1,
        value: [],
      },
      id: "e39e36659aefac2e",
      timestamp: 1717786640020000,
      startup: true,
    },
    {
      library: "pg",
      input: {
        query:
          'CREATE OR REPLACE FUNCTION json_object_set_key( "json" jsonb, key_to_set TEXT, value_to_set anyelement ) RETURNS jsonb LANGUAGE sql IMMUTABLE STRICT AS $function$ SELECT concat(\'{\', string_agg(to_json("key") || \':\' || "value", \',\'), \'}\')::jsonb FROM (SELECT * FROM jsonb_each("json") WHERE key <> key_to_set UNION ALL SELECT key_to_set, to_json("value_to_set")::jsonb) AS fields $function$;',
        params: [],
      },
      output: {
        type: 1,
        value: [],
      },
      id: "b4e5ef3a5a354122",
      timestamp: 1717786640021000,
      startup: true,
    },
    {
      library: "pg",
      input: {
        query:
          'CREATE OR REPLACE FUNCTION array_add( "array" jsonb, "values" jsonb ) RETURNS jsonb LANGUAGE sql IMMUTABLE STRICT AS $function$ SELECT array_to_json(ARRAY(SELECT unnest(ARRAY(SELECT DISTINCT jsonb_array_elements("array")) || ARRAY(SELECT jsonb_array_elements("values")))))::jsonb; $function$;',
        params: [],
      },
      output: {
        type: 1,
        value: [],
      },
      id: "9c68b8ee818253b8",
      timestamp: 1717786640026000,
      startup: true,
    },
    {
      library: "pg",
      input: {
        query:
          'CREATE OR REPLACE FUNCTION array_add_unique( "array" jsonb, "values" jsonb ) RETURNS jsonb LANGUAGE sql IMMUTABLE STRICT AS $function$ SELECT array_to_json(ARRAY(SELECT DISTINCT unnest(ARRAY(SELECT DISTINCT jsonb_array_elements("array")) || ARRAY(SELECT DISTINCT jsonb_array_elements("values")))))::jsonb; $function$;',
        params: [],
      },
      output: {
        type: 1,
        value: [],
      },
      id: "de550124ce7120b4",
      timestamp: 1717786640031000,
      startup: true,
    },
    {
      library: "pg",
      input: {
        query:
          'CREATE OR REPLACE FUNCTION array_remove( "array" jsonb, "values" jsonb ) RETURNS jsonb LANGUAGE sql IMMUTABLE STRICT AS $function$ SELECT array_to_json(ARRAY(SELECT * FROM jsonb_array_elements("array") as elt WHERE elt NOT IN (SELECT * FROM (SELECT jsonb_array_elements("values")) AS sub)))::jsonb; $function$;',
        params: [],
      },
      output: {
        type: 1,
        value: [],
      },
      id: "8d61ae9480f6059d",
      timestamp: 1717786640031000,
      startup: true,
    },
    {
      library: "pg",
      input: {
        query:
          'CREATE OR REPLACE FUNCTION array_contains_all( "array" jsonb, "values" jsonb ) RETURNS boolean LANGUAGE sql IMMUTABLE STRICT AS $function$ SELECT CASE WHEN 0 = jsonb_array_length("values") THEN true = false ELSE (SELECT RES.CNT = jsonb_array_length("values") FROM (SELECT COUNT(*) as CNT FROM jsonb_array_elements_text("array") as elt WHERE elt IN (SELECT jsonb_array_elements_text("values"))) as RES) END; $function$;',
        params: [],
      },
      output: {
        type: 1,
        value: [],
      },
      id: "27d6e6fe1fdadfa3",
      timestamp: 1717786640032000,
      startup: true,
    },
    {
      library: "pg",
      input: {
        query:
          'CREATE OR REPLACE FUNCTION array_contains_all_regex( "array" jsonb, "values" jsonb ) RETURNS boolean LANGUAGE sql IMMUTABLE STRICT AS $function$ SELECT CASE WHEN 0 = jsonb_array_length("values") THEN true = false ELSE (SELECT RES.CNT = jsonb_array_length("values") FROM (SELECT COUNT(*) as CNT FROM jsonb_array_elements_text("array") as elt WHERE elt LIKE ANY (SELECT jsonb_array_elements_text("values"))) as RES) END; $function$;',
        params: [],
      },
      output: {
        type: 1,
        value: [],
      },
      id: "dd21c83d4af3d2be",
      timestamp: 1717786640033000,
      startup: true,
    },
    {
      library: "pg",
      input: {
        query:
          'CREATE OR REPLACE FUNCTION array_contains( "array" jsonb, "values" jsonb ) RETURNS boolean LANGUAGE sql IMMUTABLE STRICT AS $function$ SELECT RES.CNT >= 1 FROM (SELECT COUNT(*) as CNT FROM jsonb_array_elements("array") as elt WHERE elt IN (SELECT jsonb_array_elements("values"))) as RES; $function$;',
        params: [],
      },
      output: {
        type: 1,
        value: [],
      },
      id: "acff3af6339cb009",
      timestamp: 1717786640033000,
      startup: true,
    },
    {
      library: "pg",
      input: {
        query: "commit",
        params: [],
      },
      output: {
        type: 1,
        value: [],
      },
      id: "7bc75533d8917222",
      timestamp: 1717786640034000,
      startup: true,
    },
    {
      library: "pg",
      input: {
        query: 'SELECT * FROM "_SCHEMA"',
        params: [],
      },
      output: {
        type: 1,
        value: [
          {
            className: "_User",
            schema: {
              fields: {
                email: {
                  type: "String",
                },
                _rperm: {
                  type: "Array",
                  contents: {
                    type: "String",
                  },
                },
                _wperm: {
                  type: "Array",
                  contents: {
                    type: "String",
                  },
                },
                authData: {
                  type: "Object",
                },
                objectId: {
                  type: "String",
                },
                username: {
                  type: "String",
                },
                createdAt: {
                  type: "Date",
                },
                updatedAt: {
                  type: "Date",
                },
                emailVerified: {
                  type: "Boolean",
                },
                _hashed_password: {
                  type: "String",
                },
              },
              className: "_User",
            },
            isParseClass: true,
          },
          {
            className: "_Role",
            schema: {
              fields: {
                name: {
                  type: "String",
                },
                roles: {
                  type: "Relation",
                  targetClass: "_Role",
                },
                users: {
                  type: "Relation",
                  targetClass: "_User",
                },
                _rperm: {
                  type: "Array",
                  contents: {
                    type: "String",
                  },
                },
                _wperm: {
                  type: "Array",
                  contents: {
                    type: "String",
                  },
                },
                objectId: {
                  type: "String",
                },
                createdAt: {
                  type: "Date",
                },
                updatedAt: {
                  type: "Date",
                },
              },
              className: "_Role",
            },
            isParseClass: true,
          },
          {
            className: "GameScore",
            schema: {
              fields: {
                score: {
                  type: "Number",
                },
                _rperm: {
                  type: "Array",
                  contents: {
                    type: "String",
                  },
                },
                _wperm: {
                  type: "Array",
                  contents: {
                    type: "String",
                  },
                },
                objectId: {
                  type: "String",
                },
                cheatMode: {
                  type: "Boolean",
                },
                createdAt: {
                  type: "Date",
                },
                updatedAt: {
                  type: "Date",
                },
                playerName: {
                  type: "String",
                },
              },
              className: "GameScore",
            },
            isParseClass: true,
          },
        ],
      },
      id: "6e5d8ea67f1453c7",
      timestamp: 1717786640038000,
      startup: true,
    },
    {
      library: "pg",
      input: {
        query:
          'CREATE UNIQUE INDEX IF NOT EXISTS "_User_unique_username" ON "_User"("username")',
        params: [],
      },
      output: {
        type: 1,
        value: [],
      },
      id: "59b88b959fa09965",
      timestamp: 1717786640051000,
      startup: true,
    },
    {
      library: "pg",
      input: {
        query:
          'CREATE INDEX IF NOT EXISTS "case_insensitive_username" ON "_User" (lower("username") varchar_pattern_ops)',
        params: [],
      },
      output: {
        type: 1,
        value: [],
      },
      id: "2154fe8812b9fdf5",
      timestamp: 1717786640057000,
      startup: true,
    },
    {
      library: "pg",
      input: {
        query:
          'CREATE INDEX IF NOT EXISTS "case_insensitive_email" ON "_User" (lower("email") varchar_pattern_ops)',
        params: [],
      },
      output: {
        type: 1,
        value: [],
      },
      id: "bd82235e3242aefd",
      timestamp: 1717786640063000,
      startup: true,
    },
    {
      library: "pg",
      input: {
        query:
          'CREATE UNIQUE INDEX IF NOT EXISTS "_User_unique_email" ON "_User"("email")',
        params: [],
      },
      output: {
        type: 1,
        value: [],
      },
      id: "04d8b329963cdfbf",
      timestamp: 1717786640064000,
      startup: true,
    },
    {
      library: "pg",
      input: {
        query:
          'CREATE UNIQUE INDEX IF NOT EXISTS "_Role_unique_name" ON "_Role"("name")',
        params: [],
      },
      output: {
        type: 1,
        value: [],
      },
      id: "b13fc2fdd806ba12",
      timestamp: 1717786640064000,
      startup: true,
    },
    {
      library: "pg",
      input: {
        query:
          'CREATE UNIQUE INDEX IF NOT EXISTS "_Idempotency_unique_reqId" ON "_Idempotency"("reqId")',
        params: [],
      },
      output: {
        type: 1,
        value: [],
      },
      id: "218fb1a8364a7365",
      timestamp: 1717786640065000,
      startup: true,
    },
    {
      library: "pg",
      input: {
        query:
          "CREATE OR REPLACE FUNCTION idempotency_delete_expired_records() RETURNS void LANGUAGE plpgsql AS $$ BEGIN DELETE FROM \"_Idempotency\" WHERE expire < NOW() - INTERVAL '300 seconds'; END; $$;",
        params: [],
      },
      output: {
        type: 1,
        value: [],
      },
      id: "6af73bc8ec325d69",
      timestamp: 1717786640066000,
      startup: true,
    },
    {
      library: "pg",
      input: {
        query: 'CREATE INDEX IF NOT EXISTS "ttl" ON "_Idempotency" ("expire")',
        params: [],
      },
      output: {
        type: 1,
        value: [],
      },
      id: "448f95ee563008b0",
      timestamp: 1717786640071000,
      startup: true,
    },
    {
      library: "pg",
      input: {
        query: 'SELECT * FROM "_Hooks"',
        params: [],
      },
      output: {
        type: 1,
        value: [],
      },
      id: "6aae649c2e3b4ee0",
      timestamp: 1717786640074000,
      startup: true,
    },
    {
      library: "pg",
      input: {
        query:
          'INSERT INTO "GameScore" ("score","playerName","cheatMode","updatedAt","createdAt","objectId") VALUES (1337,\'Sean Plott\',false,\'2024-06-07T18:57:26.461Z\',\'2024-06-07T18:57:26.461Z\',\'EBxZDyd4Ln\')',
        params: [],
      },
      output: {
        type: 1,
        value: [],
      },
      id: "9e1cf792c7416a26",
      timestamp: 1717786646466000,
      startup: false,
    },
  ];
  let pgInterceptor: libraries.PgInterceptor;

  let redis: any;
  let redisInterceptor: libraries.RedisInterceptor;

  const EXPECTED_BODY =
    '{"objectId":"EBxZDyd4Ln","createdAt":"2024-06-07T18:57:26.461Z"}';
  const EXPECTED_RESPONSE_HEADER = {
    "x-powered-by": "Express",
    "access-control-allow-methods": "GET,PUT,POST,DELETE,OPTIONS",
    "access-control-allow-headers":
      "X-Parse-Master-Key, X-Parse-REST-API-Key, X-Parse-Javascript-Key, X-Parse-Application-Id, X-Parse-Client-Version, X-Parse-Session-Token, X-Requested-With, X-Parse-Revocable-Session, X-Parse-Request-Id, Content-Type, Pragma, Cache-Control",
    "access-control-expose-headers":
      "X-Parse-Job-Status-Id, X-Parse-Push-Status-Id",
    location: "http://localhost:1337/parse/classes/GameScore/EBxZDyd4Ln",
    "content-type": "application/json; charset=utf-8",
  };

  beforeEach(() => {
    client = new pg.Client();
    redis = createClient({});
  });

  afterEach(async () => {
    global.Date = OriginalDate;
    jest.clearAllMocks();
    process.env = originalEnvironment;

    // Emit test results.
    utils.serializeTestResults("generated/test_results/0.json", {
      traceId: "c04b241fc667089b774d38e2117f4940",
      testFile: __filename.split("/").pop() as string,
      request: {
        pathKey: "/parse/classes/:className",
        route: "/parse/classes/GameScore",
        method: "POST",
      },
      response: {
        expected: {
          status: 201,
          body: EXPECTED_BODY,
          header: EXPECTED_RESPONSE_HEADER,
        },
        observed: {
          status: response.status,
          body:
            (response.headers && response.headers["content-length"] == 0) ||
            (response.status == 204 && !Object.keys(response.body).length)
              ? undefined
              : response.text || JSON.stringify(response.body),
          header: libraries.canonicalizeResHeaders(response.header),
        },
      },
      expectedCalls: [
        ...cryptoCallsExpected,
        ...dateCallsExpected,
        ...pgCallsExpected,
      ],
      observedCalls: [
        ...httpInterceptor.getObservedCalls(),
        ...cryptoInterceptor.getObservedCalls(),
        ...dateInterceptor.getObservedCalls(),
        ...pgInterceptor.getObservedCalls(),
        ...redisInterceptor.getObservedCalls(),
      ],
    });
  });

  it("should run as expected with example data", async () => {
    // @ts-expect-error we manage http mocking globally, so that we can reuse a
    // global polly server. We pass in hooks to manage the global state here.
    httpInterceptor = new libraries.HttpInterceptor(global.__HTTP_CALL_HOOKS__);
    httpInterceptor.expectCalls([]);

    cryptoInterceptor = new libraries.CryptoInterceptor(crypto);
    cryptoInterceptor.expectCalls(cryptoCallsExpected);

    pgInterceptor = new libraries.PgInterceptor(pg);
    pgInterceptor.expectCalls(pgCallsExpected);

    redisInterceptor = new libraries.RedisInterceptor(redis);
    redisInterceptor.expectCalls([]);

    // Import the app.
    const { getApp } = await import("../config");
    const app = await getApp();

    dateInterceptor = new libraries.DateInterceptor();
    dateInterceptor.expectCalls(dateCallsExpected);

    // Make the request.
    response = await request(app)
      .post("/parse/classes/GameScore")
      .set("host", "localhost:1337")
      .set("user-agent", "curl/8.4.0")
      .set("accept", "*/*")
      .set("x-parse-application-id", "APP_ID")
      .set("x-parse-master-key", "MASTER_KEY")
      .set("content-type", "application/json")
      .set("x-detail-originator", "detail")
      .send({ score: 1337, playerName: "Sean Plott", cheatMode: false });
  });
});
